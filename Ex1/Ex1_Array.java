package Ex1;
//배열(Array)
//같은 자료형의 변수를 지정하여 여러 데이터를 저장할 수 있는 저장공간을 의미
//이렇게 여러개의 데이터를 담을 수 있는 구조를 자료구조(data structure)
//배열을 사용하면 같은 자료형의 데이터들을 효율적으로 다룰 수 있다.
public class Ex1_Array {
	public static void main(String[] args) {
		
		//배열의 선언
		//자료형[] 배열명;
		//[]는 배열로 만들겠다 라고 선언하는 연산자
		//자료형 뒤에 붙이거나 배열명 뒤에 붙이면 해당 자료형의 배열이라는 의미로 선언된다.
		//자료형 뒤에 붙이는것이 가독성이 좋아 자주 사용된다.
		
		//null
		
		//int num;
		//해당 변수는 어떤 값을 가질지 알 수 없다.
		//만약 변수를만들 때 값을 부여하지 않으면 시스템이 타입에 맞는 불특정 값을 부여하게 된다.
		//따라서 변수를 만들 때, 어떤값이 부여되는지 쉽게 알기 위해 초기화를 하는 경우가 많다.
		//int num = 0;
		
		//배열의 경우 여러 개의 데이터를 저장하기 위해 별도의 공간이 필요하다.
		//배열을 선언만 하고 생성을 하지 않을 경우, 시스템은 배열을 만들 때 null이라는 키워들 부여한다.
		//null의 의미는 "없다"라는 의미를 가진다.
		//배열은 만들어졌지만 그 안에 값을 담을 공간들이 생성되지 않았다는 뜻이다.
		
		//배열의 생성
		//배열명 = new 자료형[크기];
		
		//선언과 생성을 동시에 하는 것도 가능하다.
		//자료형[] 배열명 = new 자료형[크기];
		
		//배열에 저장될 값을 미리 부여해 선언하는 방법도 존재한다.
		
		//자료형[] 배열명 = {값1,값2,값3,값4...}
		
		//위와 같은 방법은 배열을 선언할 때 값을 지정할 수 있고
		//중괄호에 넣은 데이터의 개수만큼 JVM이 공간을 할당해준다.
		//해당 방법은 최초 선언할 때만 가능하다.
		
//		int [] arr = new int[4];
//		
//		System.out.println(arr);
		//[I@58ceff1과 같은 형식으로 출력된다.
		//이 값은 배열이 위치한 주소값
		//값을 직접 저장하는 것이 아니라 주소값이 저장되어 해당
		//주소에 가면 저장되어있는 값을 볼 수 있다.
		
		//배열의 특징
		//배열 생성시 크기를 지정한다.
		//배열 생성후 공간의 크기를 늘리거나 삭제할 수 없다.
		//지정된 자료형의 값만 저장할 수 있다.
		
		//배열의 구조
		//1. 인덱스(index)
		//배열을 만든 후에 값을 넣거나 꺼내야한다.
		//배열은 각 공간마다 위치를 알려주는 위치 값이 존재한다.
		//배열이 지니는 값들의 위치를 인덱스(index)라고 부른다.
		//인덱스(index)는 배열의 공간마다 붙여진 번호로 0부터 시작하여
		//순차적으로 증가한다.
		float[] far = new float[5];
		//int num =3;
		
		String[] sar = new String[5];
		
		int[] ar = new int[4];
		
		//배열명[index]
		ar[0] = 100;
		ar[1] = 200;
		ar[2] = 300;
		ar[3] = 400;

		System.out.println(ar[0]);
		System.out.println(ar[1]);
		System.out.println(ar[3]);
//		                     ||
		
		//배열의 크기(길이)
		//배열을 생성할 때 []안에 배열의 크기를 작성했다.
		//배열을 사용하면서 종종 배열의 크기가 필요할 때가 있다.
		//배열은 내부적으로 length 라는 변수를 지니는데,
		//해당 변수는 배열의 크기값을 가지고 있다.
		//배열의 크기를 알고싶을 때는 '배열명.length'를 하면된다
		//이 변수의 값은 배열이 생성될 때 지정되며 변경할 수 없다.
		
		
		//반복문을 이용한 배열의 출력
		for(int i = 0; i <ar.length ; i++) {
			System.out.println(ar[i]);
		}
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	}

}
